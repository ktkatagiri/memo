#+AUTHOR: YuuhiK
#+TITLE: 2012年3月の記録
#+LANGUAGE: ja
#+HTML: <meta content='no-cache' http-equiv='Pragma' />
#+STYLE: <link rel="stylesheet" type="text/css" href="./org-mode.css">

* 9日
はぁ．

** Webサービス，Webアプリケーションなどの利用構成？
- 外向け
メイン: sinatra + haml + sequel
GithubPages: Emacs org-mode + CSS(this)
- 内向け
部屋用: Emacs org-mode + CSS
bitbuckets: Emacs org-mode + CSS

* 10日
8時起床．旅先で
** EmacsにHaskellモード導入した
#@emacs

参考: 
Haskell-mode for Emacs\\
 http://projects.haskell.org/haskellmode-emacs/

以下のソースを.emacsに
#+begin_src emacs-lisp
;; haskell
(add-to-list 'load-path "~/.emacs.d/elisp/haskell-mode-2.8.0/")
;; (load-library "haskell-site-file")

;; enscript scheme
(setq auto-mode-alist
  (append auto-mode-alist
    '(("\\.[hg]s$"  . haskell-mode)    
      ("\\.hi$"     . haskell-mode)
      ("\\.l[hg]s$" . literate-haskell-mode))))

(autoload 'haskell-mode "haskell-mode"
          "Major mode for editing Haskell scripts." t)
(autoload 'literate-haskell-mode "haskell-mode"
          "Major mode for editing literate Haskell scripts." t)

(add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
;;(add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
(add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
;;(add-hook 'haskell-mode-hook 'turn-on-haskell-simple-indent)
#+end_src

** Emacs org-modeのTips
#@emacs
今日調べたorg-modeなどのことを記録しておく．

*** org-modeで全展開するには？
C-u×3 Tabで

*** org-modeからのHTMLなどへのエクスポートのオプション
http://hpcgi1.nifty.com/spen/index.cgi?OrgMode%2FManual4#i12

C-c C-e t	エクスポートのオプションのテンプレートを挿入します。

無効化の仕方が分からないため2回 # を挿入している
#+begin_example
# #+TITLE:     the title to be shown (default is the buffer name)
# #+AUTHOR:    the author (default taken from user-full-name)
# #+EMAIL:     his/her email address (default from user-mail-address)
# #+LANGUAGE:  language for HTML, e.g. `en' (org-export-default-language)
# #+TEXT:      Some descriptive text to be inserted at the beginning.
# #+TEXT:      Several lines may be given.
# #+OPTIONS:   H:2  num:t  toc:t  \n:nil  @:t  ::t  |:t  ^:t  *:nil  TeX:t LaTeX:t

# #+TITLE:    表示されているタイトル（デフォルトはバッファ名）
# #+AUTHOR:   作成者（デフォルトはユーザーのフルネーム）
# #+EMAIL:    Ｅメールアドレス（デフォルトはユーザーメールアドレス）
# #+LANGUAGE: ＨＴＭＬの言語。例"en"（デフォルトはorg-export-default-language)
# #+TEXT:     文頭に挿入する何らかの記述
# #+TEXT:     複数行つける場合は各行につける
# #+OPTIONS:  H:2  num:t  toc:t  \n:nil  @:t  ::t  |:t  ^:t  *:nil  TeX:t LaTeX:t
#            というオプション（次項で説明）
#+end_example

*** About code highlight by org-mode
<s Tab でbegin\_srcを挿入することができる．

*** org-modeでのHTML出力
本ページはemacs org-modeによって生成されたHTMLを使っている．
ショートカットは"C-c C-e b"．

** AOJメモ
#@AOJ
AOJのJavaでSubmitするときにはMainというクラス名で

*** Scannerクラスの振る舞いまとめ
#@java


#+begin_example
- java.lang.Object
  +- java.util.Scanner

- public final class Scanner extends Object implements Iterator<String>
#+end_example
キーボードからの入力を受け付けるときは以下のように記述する

#+begin_src java
import java.util.Scanner;
// ...
Scanner scan = new Scanner(System.in);
#+end_src

** 自作コマンドを~/local/...のディレクトリで管理している

* 11日
前日から9時くらいまでは意識があった．その後意識を失い12日に至る．

** 雑記
朝まではorg-modeの使い方やHaskellについて調べていた．
昼過ぎからVBを書く予定であったが，起きると月曜であった．
良くないことをしてしまったと思う．

午前中，佐川やクロネコで女装用品がいくつか届いた．ウィッグや，つけまつげ，スカートやスポーツブラなど．
試着してみるがかわいいとはほど遠くて，まぁ予想通りなのだけど，まぁがっかりした．
まぁこっちはわりとどうでも良いことである．

* 12日
5時起床．
22時に帰宅開始．

** Emacsのorg-mode
相変わらず，ソースコードへの色の着け方が分からないため，
begin\_srcではなbegin\_exampleを使っている．
この辺，どういう風にemacslispいじれば良いかなど分かる人がいらっしゃったらhelp．
\\
\\

あとはやはりorg-modeで生成されたHTMLだけでは見づらいため早くCSSに手をつける．
具体的には今日の夕方に．


*** 休学を考えている
まず気になるのは金のことだ．奨学金は当然止まるし，復活できるとも限らない(下記URL参照\\
http://www.jasso.go.jp/taiyochu/idou/kyuusi.html

当然，一年間はバイト漬けになるわけだが，バイトをするために休学するのでは本末転倒である．
休学カードもあまり良くないのなら途方に暮れる．\\
現状で何かこれっていえる製作ソフトウェアの無い私ではロクな就職先は期待できない．

あと，仕事で書いているVBプログラムの方も手をつけなければならない．進捗が遅い．



** Github-Pagesの追加
現在書いている，org-modeでのメモ公開用のGithubのWebページを創設した．URLは以下に\\
http://yuuhik.github.com/memo/

インデックスのページはやっつけ．CSSもあとからがっつり書きなおす．


** TODO にゃあにゃあな発表用の原稿作成(03/14日まで)
今週中に完成させる．

** TODO 今月の家賃(03/15まで)
払っていたかを確認








** rubyからのGrowlの使い方
以下にように書ける．
次のMacOSXでは必要無くなりそうだが．．

perlだと
http://d.hatena.ne.jp/sugyan/20120222/1329906680

#+begin_src ruby
# -*- coding: utf-8 -*-
require 'rubygems'
require 'ruby_gntp'

# -- Standard way
growl = GNTP.new("Ruby/GNTP self test")
growl.register(:notifications => [{
  :name     => "notify",
  :enabled  => true,
}])

growl.notify(
  :name  => "notify",
  :title => "Congraturation",
  :text  => "Congraturation! You are successful install ruby_gntp.",
  :icon  => "http://www.hatena.ne.jp/users/sn/snaka72/profile.gif",
  :sticky=> true,
)
#+end_src

** rubyでirbを使った対話式の開発を行いたい
ここに書いてある？\\
http://blog.kiftwi.net/2011/05/31/emacs%E3%81%A7irb%E3%81%97%E3%81%AA%E3%81%8C%E3%82%89%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E6%9B%B8%E3%81%84%E3%81%A6%E3%81%BF%E3%82%8B/

* 13日
前の日から起きていたが，特にプログラムなどを書いていたわけではなく，これだからボクは．．と後悔がわいてきそうになる．\\
起きたら16時であった絶望．．．もういかなければならないが，その前に洗濯物を片付ける．\\
リリースの予定が早まったらしい，ヤバい．


** TwitterのWebのバグ
まとめは以下に\\
http://blog.konn-san.com/article/20120312/Twitter%20%E6%B3%A2%E6%8B%AC%E5%BC%A7%E4%BA%8B%E4%BB%B6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%BE%E3%81%A8%E3%82%81%E3%81%A6%E3%81%BF%E3%82%8B
\\
http://togetter.com/li/272021
\\
みんな好き放題やっていた．思わず時間を使ってしまい頭をもたげる．

** SQLのメモ１
Webアプリケーション作成において特に重要なのがDBだが，SQLもまともに書けないことを先日思い知ったため，
勉強とその記録を取っていく．非常に簡単な説明で済ますので，厳密な意味で言葉が違うこともあるので目をつぶるかTwitterのアカウントにでもリプ飛ばしてやってほしい．
|--------------+------------------------------------------------------------------------------|
| データベース | 大量の情報を保存し計算機から効率良くアクセスできるように加工したデータの集合 |
| DBMS         | データベースを管理する計算機のシステム                                       |
| SQL          | リレーショナルデータベースを操作するための言語？                             |
|--------------+------------------------------------------------------------------------------|

** 生活習慣
3時までに寝るか．せめて，おふとんに入って寝るべきだなぁと思う．

** Emacsのsql-modeが良いらしいという話を聞き導入


参考： [[http://www.sixnine.net/roadside/sqlmode.html]["Trumps by the roadside" - sql-mode: Emacs から SQL 文を実行する]] \\
以下の5つのelispファイルがあれば良いらしい
|------------------+------------+--------------------------------------------------|
| 名前             | バージョン | 説明                                             |
|------------------+------------+--------------------------------------------------|
| sql.el           |      1.6.3 | SQL インタプリタ用の comint                      |
| sql-indent.el    |      1.1.2 | SQL 文のインデント                               |
| sql-transform.el |      2.2.0 | SQL 文の変換                                     |
| sql-complete.el  |      0.0.1 | テーブル / カラムの補完機能                      |
| master.el        |      1.0.2 | 現在のバッファから他のバッファのスクロールを行う |
|------------------+------------+--------------------------------------------------|

sql.elとmaster.elはbrewから導入したEmacs23には最初から入っていたので，中3つだけインストールした．
今回のインストールでは久々にauto-installを利用した．
M-x auto-install-from-emacswikiで起動し，それぞれのelispファイル名を入れて，C-c C-cするだけ．

*** Emacs から各種 SQL クライアントを起動する方法
基本的には「 M-x sql-XX 」とすれば良いらしい

*** このMBAにmysqlが入っていなかったため
#+begin_example
brew install mysql
#+end_example
cmake-2.8.7-bottle.tar.gzがmd5のなんとかでインストールできなかったため．
#+begin_example
sudo brew update
brew install mysql
#+end_example

*** tmuxで上の方に戻るには？
Ctrl-Up, Ctrl-DownでできるらしいがLionでは既に割り当てられている．．
- あれ？外したけどできないよ？\\
  - Cmdでいけた
# MBAではCtrl-fn-↑，Ctrl-fn-↓でもスクロールできる

* 14日
時間が経つのがはやすぎる．．
今日はずっと起きて，様々な課題を一気に片付ける <2012-03-14 水 10:25>
\\
タスクをswitchする <2012-03-14 水 10:59> 
\\
昼ご飯食べた．お腹いっぱい <2012-03-14 水 12:57>
\\
シャワー浴びて仮眠します．誰か起こして，やさしく <2012-03-14 水 19:27>
\\
** Emacs org-mode メモ
[Ctrl-c .]や[Ctrl-u Ctrl-c .]でタイムスタンプを挿入することができる．
正確にはここに\\
http://hpcgi1.nifty.com/spen/index.cgi?OrgMode/Manual2#i22 \\

org-modeはいろんな機能とショートカットがあるので早く必要となる部分を網羅したい．

** TODO TOEIC申し込み
TOEIC申し込みが，
2012年3月5日（月）10：00～4月17日（火）12：00（正午）締切 
となっている．締切に注意されたし．勉強も着実にこなせ．\\

http://www.toeic.or.jp/toeic/guide01/guide01_01.html?eno=1134

** beamerをorg-modeから利用する方法について
ドキュメント作成もプレゼン作成もはやさが肝だ！
そう，今のボクには速さがっ足りない！！

*** beamerとは
Beamerはプレゼン用のLaTeXのクラスファイル．

#+begin_quote
Beamer は Till Tantau 氏によって作られた，プレゼンテーション用の LaTeX クラスファイルです。
#+end_quote
http://imi.kyushu-u.ac.jp/~ssaito/jpn/tex/beamer.html より引用

**** 今使っているTeX
私のメイン環境はMBAでOSX10.7 Lionで小川版をインストールしている．\\
JIS X0212 for pTeX http://www2.kumagaku.ac.jp/teacher/herogw/ \\
私の環境の場合，/Applications/UpTeX.app/teTeX/share/texmf/web2c/texmf.cnfに
スタイルファイルの置き場所の検索パスの設定などがあった．
もし，ここに書き込んだ場合
#+begin_example
mktexlsr
#+end_example
とすることでスタイルファイルの導入が済むらしい．

**** 導入
LaTeX Beamer 入門 http://www.ms.u-tokyo.ac.jp/~tado/beamer/
\\
今回は/Applications/UpTeX.app/teTeX/share/texmf-localというディレクトリを増やしてそこに設定

**** サンプルファイルのコンパイル
SJISだったのでUTF-8に変換．
#+begin_example
nkf -w8 sample.tex > hoge.tex
#+end_example
いい加減，nkfのオプションくらい覚えたい．


**** サンプルコード
#+begin_src tex
\documentclass[dvipdfm]{beamer}
\AtBeginDvi{\special{pdf:tounicode 90ms-RKSJ-UCS2}}
\usetheme{Madrid}
\title{タイトル}
\author{ゆうひ}
\institute[つい]{Twitter}
\date{2012/3/15}
\begin{document}
\frame{\titlepage}

\section{はじめに}
\begin{frame}{フレームタイトル}
内容をここに．

\alert{強調}
数式：$1+1=2$
\end{frame}
\end{document}
#+end_src

**** ここまでは動いた
org-modeで動いてくれれば良い

ここにだいたいのことは書いている\\
http://d.hatena.ne.jp/tamura70/20100219/org \\

のだが，org→texのエキスポートが上手くいっていないようだ．


texのファイルは上手くpdfまで変換できるので，tex直書きで進めていくか？beamerの設定見なおすか．．？

これが必要
#+begin_example
# #+BEAMER_HEADER_EXTRA: \usepackage[compress,dvipdfm]{orgbeamer}
#+end_example

どうやって付け足すんだ？

** Emacsのorg-modeのショートカットなどがまとまっている？
http://pastelwill.jp/wiki/doku.php?id=org-test

* 15日
とても忙しかった．辛い．
あとorg-modeを使ったbeamerの使い方を覚えた．
こういう感じのヘッダが必要．
#+begin_example
 # #+TITLE: にゃにゃにゃーん！
 # #+AUTHOR: にゃあ
 # #+DATE: 2012年3月15日
 # #+OPTIONS: toc:nil
 # #+STARTUP: beamer
 # #+LATEX_CLASS: beamer
 # #+LATEX_CLASS_OPTIONS: [compress,dvipdfm]
 # #+BEAMER_FRAME_LEVEL: 2
 # #+BEAMER_HEADER_EXTRA: \usepackage{orgbeamer}
#+end_example

* 16日
ふと気づけば歩みを止めている．絶望した．記録し続けろ．
一日中寝続けた．照明もエアコンもつけっぱなしのまま，変な姿勢で絨毯の上に放り出されるように眠っていたため，
長い睡眠時間の割に疲れがとれていない．残念．明日も仕事があるのに．．

* 17日
gntp経由でgrowl通知を叩く方法を試していた．
- 上手くアイコンが表示されない．
当分は以下のようなコマンドを直接叩く方法でなんとかする．
#+begin_example
growlnotify -t hello -m "ほげ" --image "[dirpath]/maid.png"
#+end_example

** 魂を奮い立たせろ
＼('ω')／うねうねぇえええええうねうねぇえええええ？＼('ω')／うおおおおおおおおおうごおおおおおおおおおおおぐおおおおお

** TeXからpdfを生成するシェルスクリプト

#+begin_example
#!/bin/sh

# このスクリプトは"./build.sh ファイル名 とすることでpdfを吐く"
# ファイル名には拡張子を含めない

name=$1
(platex $name".tex" && platex $name".tex" && dvipdfmx $name".dvi" && open $name".pdf") || echo 'error!'

rm *~
rm *.aux
rm *.bbl
rm *.blg
rm *.dvi
# rm *.log
rm *.lot
rm *.lof
rm *.toc
# rm \#*\#
#+end_example

をemacsから叩けるようにする

** CSS弄った

** emacsマイナーモード書くときに参考にする
https://github.com/toshia/mikutter-mode

** VMとDropBoxの組み合わせは恐ろしい
というかVMが恐ろしい．
あと他人にPC渡すときはDropBoxのヒモ付切る．

- 追記: 何も問題なかった．勘違い．でもVM上にはDropBoxインストールしないようにする．
その手軽さがこわいんだァ！！

* 18日
起床． <2012-03-18 日 04:26>

** GithubにEOPLの読んだ感想と書いたプログラムをアップする用のリポジトリ作る
gh-pagesのブランチも作ろうと思ったけど．masterからgh-pagesへのマージ？仕方分からないの．

*** mergeの簡単の仕方(コンフリクトが発生した場合)
git pull とかでコンフリクトが起こったときの対処 - Mattari Memo
 http://d.hatena.ne.jp/piropati/20090122/1232604189


* 19日
ほぼ徹夜．会社泊まりこみじゃなくて本当に良かった．TODO管理の決定版が思いつかない．

** TODO 家賃の支払忘れるな
一応通帳記入して確かめる

** TODO 3月末に中四国に滞在するように予定をたてる
ドラクリオットの発売とかぶっているので注意．

* 20日
はやすぎる．
** Schemeのdo構文
非常に使いづらい，覚えづらい．
#+begin_src scheme
(do ((変数1 初期値1 ステップ1)
     (変数2 初期値2 ステップ2)
     (・・・ ・・・ ・・・)
     (変数n 初期値n ステップn))
  (ループ終了条件 終了後に返す値)
  式・・・)
#+end_src

まじ，見づらすぎる滅べ．

** 並行処理のまとめ
コルーチン，マルチスレッドについて調べて厳密に定義

*** マルチタスキング
アプリケーションのコンパイル中に，インターネットで株価を調べたりしない．．

*** プロセス

*** スレッド

** GravaterのAPIの使い方
http://ja.gravatar.com/site/implement/images/ruby/
#+begin_src ruby
# include MD5 gem, should be part of standard ruby install
require 'digest/md5'

# get the email from URL-parameters or what have you and make lowercase
email_address = "yuuhi@example.com"

# create the md5 hash
hash = Digest::MD5.hexdigest(email_address)

# compile URL which can be used in <img src="RIGHT_HERE"...
image_src = "http://www.gravatar.com/avatar/#{hash}"
#+end_src

でいける．そもそもこのサービスがなんなのかよく分からない．Githubのアイコンを表示させるときに登録させられたけど．．


** A Normal Fromとは？


** Ajaxとは？
再確認．
ウェブブラウザ内で非同期通信とインターフェイスの構築などを行う技術の総称．
主にXMLHttpRequestという組み込みオブジェクトを利用して非同期通信を使って，
通信のレスポンスによってHTML(DOM)を動的に書き換え，見た目などに反映させること．
AJAXはAsynchronous JavaScript + XMLの略らしいが，最近はXMLよりJSONの方が多く使われていそうだし，
AJAJだよなぁ．

*** そもそも非同期(Asynchronous)とは何か？

XHRのこと https://developer.mozilla.org/ja/XMLHttpRequest \\
#+begin_src javascript
// XMLHttpRequestの
var req = new XMLHttpRequest();
req.open('GET', 'http://www.zitoo-me.net/hoge.json', true);
req.onreadystatechange = function (e) {
  if (req.readyState == 4)
     alert('ひどうき！')
  }
};
req.send(null);
alert('にゃあ');
#+end_src

onreadystatechangeプロパティはreadyState 属性が変更する都度呼び出されるJavaScriptの関数オブジェクト．
コールバック関数はユーザーインターフェーススレッドから呼び出される．
- readyState
| 値 | 状態             | 詳細                                                            |
|----+------------------+-----------------------------------------------------------------|
|  0 | UNSENT           | open() がまだ呼び出されていない。                               |
|  1 | OPENED           | send() がまだ呼び出されていない。                               |
|  2 | HEADERS_RECEIVED | send() が呼び出され、ヘッダーとステータスが通った。             |
|  3 | LOADING          | ダウンロード中；　responseText は断片的なデータを保持している。 |
|  4 | DONE             | 一連の動作が完了した。                                          |

#+begin_src javascript
// setTimeoutの
var sid = setTimeout(function () {
  alert('ひどうき！');
}, 0);
alert('にゃあ');
#+end_src

#+begin_src javascript
// イベントの
document.body.onclick = function (e) {
  alert('ひどうき！');
};
alert('にゃあ！');
#+end_src

上記のコードは全て「にゃあ」の後に「ひどうき！」がalertされる．

- JavaScriptはシングルスレッド
非同期的に呼ばれるコールバックを登録する関数を呼び出した時は，
その呼び出した側の関数の実行が終わってから，トップレベルまで制御が帰ったあとじゃないと，
コールバックは呼び出されない．

*** コールバックとは？
コールバック (情報工学) \\
http://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%BC%E3%83%AB%E3%83%90%E3%83%83%E3%82%AF_%28%E6%83%85%E5%A0%B1%E5%B7%A5%E5%AD%A6%29 \\

- JavaScriptにおいてはイベント駆動型のプログラミングにおいてもちいられるため
オブザーバパターンの用途．

- マルチキャスト型のコールバック(一つのイベントで複数のコールバックで登録された関数を呼び出すことができる？)

*** 非同期だとプログラミングの難易度があがる
どういうところが問題なのか？
- コードの見た目順に実行されるわけではない
  - JavaScriptではコールバックを用いる
  - これらは全てコールバックをとりそれをあとで実行

* 21日
君とうねうねしたい．

** org-modeにおける画像の表示方法
http://hpcgi1.nifty.com/spen/index.cgi?OrgMode%2FManual4#i5
#+begin_example
 ［［file:highres.jpg］［file:thumb.jpg］］
#+end_example
例えば↓の例みたいに表示される．begin\_htmlで書いたほうが良さげ？

 [[file:sc1.png][file:sc1.png]]

#+begin_src html
<img src="sc1.png" alt="イベント駆動型の図" height=250>
#+end_src

#+begin_html
<img src="sc1.png" alt="イベント駆動型の図" height=250>
#+end_html

** Botの問題点まとめ
- リプライが止まらない
確率を入れるか．最大値を設定するか．
- リツイートに反応する
数行書くだけ．
- ツイートの生成元のソースが少ない
クローラーを組み込んでいろんなところから情報収集する．データベースをもう少しマジメに設計する．
- 32bitOSでのmongoDBの問題
MySQLに移行予定

