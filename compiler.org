#+AUTHOR: Yuuhi
#+TITLE: コンパイラ製作メモ
#+LANGUAGE: ja
#+HTML: <meta content='no-cache' http-equiv='Pragma' />
#+STYLE: <link rel="stylesheet" type="text/css" href="./bootstrap.min.css">
#+STYLE: <link rel="stylesheet" type="text/css" href="./org-mode.css">

* 資料
- 本
  - コンパイラ―原理・技法・ツール (Information & Computing), A.V. エイホ
    - URL: http://www.amazon.co.jp/dp/478191229X/
    - 持っていない．高い．図書館で借りた．
  - コンパイラ (情報系教科書シリーズ), 湯浅 太一
    - URL: http://www.amazon.co.jp/dp/4785620501/
    - 持っている．買った．
  - 最新コンパイラ構成技法 Andrew W. Appel (著), 神林 靖 (監修, 編集), 滝本 宗宏 (編集)
    - URL: http://www.amazon.co.jp/dp/4798114685/
    - 持っている．買った．
  - Compiling with Continuations, Andrew W. Appel (著)  http://www.amazon.co.jp/dp/052103311X
    - この本欲しいなぁ．Kindleで売ってるのかな．買おうか．高いが．．

- 公開されている講義資料
  - コンパイラの作り方 (詳解) http://www.is.s.u-tokyo.ac.jp/vu/96/cad/compilerresume/
    - この資料をメインにコンパイラ製作を進める[fn:comp_with_cont]
  - http://www.mlab.im.dendai.ac.jp/compiler/hint1.html

- 論文
  - 3imp.pdf( Three implementation models for scheme ) http://www.cs.indiana.edu/~dyb/papers/3imp.pdf
    - Schemeのインタプリタの実装方法を説明している

    - 簡単に日本語で解説している http://route477.net/w/?Reading3imp.pdf

* やること
- 小さな言語の設計
  - Schemeのサブセットのようなもの
    - S式の言語
  - コンパイラはSchemeで記述する

- 仮想マシンの作成
  - 仮想マシンの設計は資料に合うものにする
    レジスタマシン
- マシン語にまでコンパイルできるコンパイラを作るには
  特定のアーキテクチャ(x86やH8など)の命令セットのこと知らなければならないので面倒
  - x86 http://ja.wikipedia.org/wiki/X86
  - H8 http://ja.wikipedia.org/wiki/H8

- 中間表現など
  - Continuation-Passing StyleやA-Normal Formといった中間表現を学ぶ

* 作成言語の設計
- 拡張BNFで
#+begin_example
Expression ::= Id
           | Contstant
           | (if Expression Expression Expression)
           | (let (Bind*) Expression)
           | (Primsym Expression*)  ;; premitive call
           | (Expresion Exprresion*)  ;; user-defined functions
Bind       ::= (Id Exprssion)    ;; let-bind
Definition ::= (define Id Expression)
           | (define (Id Id*) Expression*) ;; toplevel definition |
Constant   ::= Integer | Float | Boolean | '()
Primsym    ::= +2 | -2 | >>2 | <<2 | <2 | >2 | <=2 | >=2 | =2 | heap
           |   record-ref | record-det! 
#+end_example

- heap: memoryの割り当て
- record-ref: heapに割り当てられたrecordの参照(vector-refみたいもの)，
- record-set!: はrecordの更新．
#+begin_src scheme
(let ((r (heap 0 1 2 3)))
  (record-set! r 0 10)
  (+2 (record-ref r 0) (record-ref r 1)))
#+end_src

* Syntax Sugarで便利な構文を追加していく
compilerはできる限り少ない機能のみをサポートしたい．
** Mini-Scheme(Lambda Closure無し) + Syntax Sugars
最低限の構文しか用意していないMini-Scheme上では，Syntax Sugarsを使って多くの便利な機能を用意してやる．
- Let*
- begin
- cond

* 何をPrimitiveにするか？
よく考える必要がある(9章[fn:comp_with_cont])

